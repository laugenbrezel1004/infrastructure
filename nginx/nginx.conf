# Main Nginx configuration file for global settings and reverse proxy setup

# Set the number of worker processes; 'auto' matches the number of CPU cores for optimal performance
worker_processes auto;

# Configure event handling for client connections
events {
    # Define the maximum number of simultaneous connections per worker process
    worker_connections 1024;
}

http {
    # HTTP server for redirecting to HTTPS and handling ACME challenges
    server {
        listen 80;  # Listen on port 80 for HTTP traffic
        server_name gitlab.laurenzschmidt.de sonarqube.laurenzschmidt.de jenkins.laurenzschmidt.de;  # Domains handled by this server

        # Handle ACME challenges for Certbot SSL certificate renewal
        location /.well-known/acme-challenge/ {
            root /webroot;  # Serve challenge files from this directory
            try_files $uri $uri/ =404;  # Return 404 if file not found
        }

        # Redirect all other HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;  # Permanent redirect to HTTPS
        }
    }

    server {
      listen 443 ssl;
      server_name laurenzschmidt.de

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        location / {
            # Define variable for GitLab backend to simplify proxy configuration
            proxy_pass http://apache:80;  # Forward requests to GitLab
            proxy_set_header Host $host;  # Pass the original host header to the backend
            proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Add client's IP to forwarded-for chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Indicate the original protocol (http or https)
        }
    }

    # HTTPS server block for GitLab
    server {
        listen 443 ssl;  # Listen on port 443 with SSL enabled
        server_name gitlab.laurenzschmidt.de;  # Domain name for GitLab

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            # Define variable for GitLab backend to simplify proxy configuration
            proxy_pass http://gitlab:80;  # Forward requests to GitLab
            proxy_set_header Host $host;  # Pass the original host header to the backend
            proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Add client's IP to forwarded-for chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Indicate the original protocol (http or https)
        }
    }

    # HTTPS server block for SonarQube
    server {
        listen 443 ssl;  # Listen on port 443 with SSL enabled
        server_name sonarqube.laurenzschmidt.de;  # Domain name for SonarQube

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            # Define variable for SonarQube backend to simplify proxy configuration
            proxy_pass http://sonarqube:9000;  # Forward requests to SonarQube
            proxy_set_header Host $host;  # Pass the original host header to the backend
            proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Add client's IP to forwarded-for chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Indicate the original protocol (http or https)
        }
    }

    # HTTPS server block for Jenkins
    server {
        listen 443 ssl;  # Listen on port 443 with SSL enabled
        server_name jenkins.laurenzschmidt.de;  # Domain name for Jenkins

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            # Define variable for Jenkins backend to simplify proxy configuration
            proxy_pass http://jenkins:8080;  # Forward requests to Jenkins
            proxy_set_header Host $host;  # Pass the original host header to the backend
            proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Add client's IP to forwarded-for chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Indicate the original protocol (http or https)
        }
    }

}

